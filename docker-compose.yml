# docker-compose.yml
services:
  postgres:
    image: postgres:16-alpine
    container_name: gacha-postgres
    restart: unless-stopped
    environment:
      # Seul POSTGRES_PASSWORD est strictement requis ; DB/USER sont courants et pratiques.
      POSTGRES_DB: ${POSTGRES_DB:-gacha_actu}
      POSTGRES_USER: ${POSTGRES_USER:-gacha_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set in .env}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gacha_user} -d ${POSTGRES_DB:-gacha_actu}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  redis:
    image: redis:7-alpine
    container_name: gacha-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-net

  app:
    # Ton Dockerfile Next.js “standalone” (celui qu’on vient de préparer)
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gacha-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      # Connexions internes via les noms de services (postgres/redis)
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-gacha_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-gacha_actu}?schema=public}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://92.112.192.123}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://92.112.192.123}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:?set in .env}
      JWT_SECRET: ${JWT_SECRET:?set in .env}
      SESSION_SECRET: ${SESSION_SECRET:?set in .env}
    command: ["node", "server.js"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    expose:
      - "3000"        # exposé au réseau docker, pas sur l'hôte
    networks:
      - app-net

  nginx:
    image: nginx:alpine
    container_name: gacha-nginx
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Ton fichier Nginx principal qui proxy vers http://app:3000
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Dossier (optionnel) pour tes certificats si tu actives TLS
      - ./nginx/ssl:/etc/nginx/ssl:ro
      # (Optionnel) logs en local
      # - ./nginx/logs:/var/log/nginx
    networks:
      - app-net

volumes:
  postgres_data:
  redis_data:

networks:
  app-net:
    driver: bridge